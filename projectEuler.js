/** 
 * projectEuler.js
 * http://code.google.com/p/mathjs/
 *
 * License: Creative Commons Attribution-Share Alike 3.0 Unported.
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 * @projectDescription   The solution to Project Euler using ECMAscript.
 * @author               Rolando Garza rolandog@gmail.com
 */

"use strict";

/**
 * An array containing proposed algorithms for solving Project Euler problems.
 */
var http = {
    /**
     * Gets a file and calls a function.
     * @param(Number) a A Number.
     */
    get: function get(url) {
        var AJAX, e;
        if (window.XMLHttpRequest) {
            AJAX = new XMLHttpRequest();
        } else {
            AJAX = new ActiveXObject("Microsoft.XMLHTTP");
        }
        if (AJAX) {
            AJAX.open("GET", url, false);
            AJAX.send(null);
            return AJAX.responseText;
        } else {
            return false;
        }
    },
    /**
     * Adds a function to the onload event.
     * @param(Function) f A Function.
     */
    onLoad: function onLoad(f) {
        var old = window.onload;
        if (typeof(old) !== 'function') {
            window.onload = f;
        } else {
            window.onload = function () {
                old();
                f();
            };
        }
    }
}, pEProblems = [
    "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.",
    "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... Find the sum of all the even-valued terms in the sequence which do not exceed four million.",
    "The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?",
    "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99. Find the largest palindrome made from the product of two 3-digit numbers.",
    "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?",
    "The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ... + 10^2 = 385. The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)^2 = 55^2 = 3025. Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.",
    "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 10001st prime number?",
    "Find the greatest product of five consecutive digits in the 1000-digit number.",
    "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a^2 + b^2 = c^2. For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2. There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.",
    "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. Find the sum of all the primes below two million.",
    "In the 20x20 grid below, four numbers along a diagonal line have been marked in red. The product of these numbers is 26 * 63 * 78 * 14 = 1788696. What is the greatest product of four adjacent numbers in any direction (up, down, left, right, or diagonally) in the 20x20 grid?",
    "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... Let us list the factors of the first seven triangle numbers:\n 1: 1 \n 3: 1,3\n 6: 1,2,3,6\n10: 1,2,5,10\n15: 1,3,5,15\n21: 1,3,7,21\n28: 1,2,4,7,14,28\nWe can see that 28 is the first triangle number to have over five divisors. What is the value of the first triangle number to have over five hundred divisors?",
    "Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.",
    "The following iterative sequence is defined for the set of positive integers: n = n/2 (n is even); n = 3n + 1 (n is odd). Using the rule above and starting with 13, we generate the following sequence: 13 40 20 10 5 16 8 4 2 1 It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1. Which starting number, under one million, produces the longest chain? NOTE: Once the chain starts the terms are allowed to go above one million.",
    "* Starting in the top left corner of a 2x2 grid, there are 6 routes (without backtracking) to the bottom right corner. How many routes are there through a 20x20 grid?",
    "2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26. What is the sum of the digits of the number 2^1000?",
    "If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total. If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?\nNOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of 'and' when writing out numbers is in compliance with British usage.",
    "Find the maximum total from top to bottom of the triangle below:\n75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33\n41 48 72 33 47 32 37 16 94 29\n53 71 44 65 25 43 91 52 97 51 14\n70 11 33 28 77 73 17 78 39 68 17 57\n91 71 52 38 17 14 91 43 58 50 27 29 48\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23",
    "You are given the following information, but you may prefer to do some research for yourself. 1 Jan 1900 was a Monday. Thirty days has September, April, June and November. All the rest have thirty-one, Saving February alone, Which has twenty-eight, rain or shine. And on leap years, twenty-nine. A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400. How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?",
    "n! means n  (n  1)  ...  3  2  1. Find the sum of the digits in the number 100!",
    "Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n). If d(a) = b and d(b) = a, where a !== b, then a and b are an amicable pair and each of a and b are called amicable numbers. For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110 Therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220. Evaluate the sum of all the amicable numbers under 10000.",
    "Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score. For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 * 53 = 49714. What is the total of all the name scores in the file?",
    "A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number. A number whose proper divisors are less than the number is called deficient and a number whose proper divisors exceed the number is called abundant. As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit. Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.",
    "A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:\n\n012   021   102   120   201   210\n\nWhat is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?",
    "What is the first term in the Fibonacci sequence to contain 1000 digits?",
    "A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:1/2    =     0.5\n1/3    =     0.(3)\n1/4    =     0.25\n1/5    =     0.2\n1/6    =     0.1(6)\n1/7    =     0.(142857)\n1/8    =     0.125\n1/9    =     0.(1)\n1/10    =     0.1\n\nWhere 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.\nFind the value of d  1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.",
    "Euler published the remarkable quadratic formula:\n\nnÂ² + n + 41\n\nIt turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41Â² + 41 + 41 is clearly divisible by 41.\n\nUsing computers, the incredible formula  nÂ²  79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, 79 and 1601, is 126479.\n\nConsidering quadratics of the form:\n\nnÂ² + an + b, where |a|  1000 and |b|  1000\n\nwhere |n| is the modulus/absolute value of n\ne.g. |11| = 11 and |4| = 4\nFind the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.",
    undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined,
    "The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.\nFind the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.",
    undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined,
    "Find the maximum total from top to bottom in triangle.txt (right click and 'Save Link/Target As...'), a 15K text file containing a triangle with one-hundred rows."
], projectEuler = [
    function Problem_1() {
        var multiples = [], i;
        for (i = 0; i < 1000; i += 1) {
            if (i % 3 === 0 || i % 5 === 0) {
                multiples.push(i);
            }
        }
        return Math.sum(multiples);
    },
    function Problem_2() {
        var fib = Math.fibonacci(4000000), s = 0, i;
        for (i = 0; i < fib.length; i += 1) {
            if (fib[i] % 2 === 0) {
                s += fib[i];
            }
        }
        return s;
    },
    function Problem_3() {
        var r = Math.factors(600851475143);
        return r.pop();
    },
    function Problem_4() {
        function isPalindrome(a) {
            a = a.toString();
            var l = a.length, i;
            for (i = 0; i < Math.floor(l / 2); i += 1) {
                if (a.charAt(i) !== a.charAt(l - 1 - i)) {
                    return false;
                }
            }
            return true;
        }
        var i, j, palindromes = [];
        for (i = 101; i <= 999; i += 1) {
            for (j = 101; j <= 999; j += 1) {
                if (isPalindrome(i * j)) {
                    palindromes.push(i * j);
                }
            }
        }
        return palindromes.sort(Math.js.ascending).pop();
    },
    function Problem_5() {
        var i, n = [];
        for (i = 20; i > 0; i -= 1) {
            n.push(i);
        }
        return Math.lcm(n);
    },
    function Problem_6() {
        var i, ns = [], sqs = [];
        for (i = 1; i <= 100; i += 1) {
            ns.push(i);
            sqs.push(Math.pow(i, 2));
        }
        return Math.pow(Math.sum(ns), 2) - Math.sum(sqs);
    },
    function Problem_7() {
        var primes = [2], i;
        for (i = 3; primes.length < 10001; i += 2) {
            if (Math.isPrime(i)) {
                primes.push(i);
            }
        }
        return primes.pop();
    },
    function Problem_8() {
        var n, i, max = 0, l;
        n = "73167176531330624919225119674426574742355349194934";
        n += "96983520312774506326239578318016984801869478851843";
        n += "85861560789112949495459501737958331952853208805511";
        n += "12540698747158523863050715693290963295227443043557";
        n += "66896648950445244523161731856403098711121722383113";
        n += "62229893423380308135336276614282806444486645238749";
        n += "30358907296290491560440772390713810515859307960866";
        n += "70172427121883998797908792274921901699720888093776";
        n += "65727333001053367881220235421809751254540594752243";
        n += "52584907711670556013604839586446706324415722155397";
        n += "53697817977846174064955149290862569321978468622482";
        n += "83972241375657056057490261407972968652414535100474";
        n += "82166370484403199890008895243450658541227588666881";
        n += "16427171479924442928230863465674813919123162824586";
        n += "17866458359124566529476545682848912883142607690042";
        n += "24219022671055626321111109370544217506941658960408";
        n += "07198403850962455444362981230987879927244284909188";
        n += "84580156166097919133875499200524063689912560717606";
        n += "05886116467109405077541002256983155200055935729725";
        n += "71636269561882670428252483600823257530420752963450";
        n = n.split("");
        l = n.length;
        for (i = 0; i < l; i += 1) {
            n[i] = +n[i];
        }
        for (i = 0; i < l - 4; i += 1) {
            max = Math.max(max, n[i] * n[i + 1] * n[i + 2] * n[i + 3] * n[i + 4]);
        }
        return max;
    },
    function Problem_9() {
        var a, b, c;
        for (c = 400; c < 500; c += 1) {
            for (b = 300; b < c; b += 1) {
                for (a = 100; a < b; a += 1) {
                    if (Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)) {
                        if (a + b + c === 1000) {
                            return a * b * c;
                        }
                    }
                }
            }
        }
    },
    function Problem_10() {
        var p = [], l, i = 1999999;
        //the lower limit is the rounded odd sqrt of i;
        l = parseInt(Math.sqrt(i), 10);
        l += l % 2 === 0 ? 1 : 0;
        while (i >= l) {
            if (Math.isPrime(i)) {
                p.push(i);
            }
            i -= 2;
        }
        p.reverse();
        return Math.sum(Math.js.primes.concat(p));
    },
    function Problem_11() {
        var a = [
            [8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
            [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
            [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
            [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
            [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
            [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
            [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
            [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
            [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
            [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
            [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
            [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
            [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
            [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
            [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
            [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
            [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
            [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
            [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
            [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]
        ], j, i, m = 0;
        for (i = 0; i < 20; i += 1) {
            for (j = 0; j < 20; j += 1) {
                if (j < 17) {
                    m = Math.max(m, a[i][j] * a[i][j + 1] * a[i][j + 2] * a[i][j + 3]);
                }
                if (j < 17 && i >= 3) {
                    m = Math.max(m, a[i][j] * a[i - 1][j + 1] * a[i - 2][j + 2] * a[i - 3][j + 3]);
                }
                if (i >= 3) {
                    m = Math.max(m, a[i][j] * a[i - 1][j] * a[i - 2][j] * a[i - 3][j]);
                }
                if (i >= 3 && j >= 3) {
                    m = Math.max(m, a[i][j] * a[i - 1][j - 1] * a[i - 2][j - 2] * a[i - 3][j - 3]);
                }
                if (j >= 3) {
                    m = Math.max(m, a[i][j] * a[i][j - 1] * a[i][j - 2] * a[i][j - 3]);
                }
                if (j >= 3 && i < 17) {
                    m = Math.max(m, a[i][j] * a[i + 1][j - 1] * a[i + 2][j - 2] * a[i + 3][j - 3]);
                }
                if (i < 17) {
                    m = Math.max(m, a[i][j] * a[i + 1][j] * a[i + 2][j] * a[i + 3][j]);
                }
                if (i < 17 && j < 17) {
                    m = Math.max(m, a[i][j] * a[i + 1][j + 1] * a[i + 2][j + 2] * a[i + 3][j + 3]);
                }
            }
        }
        return m;
    },
    function Problem_12() {
        for (var i = 2, t = 3; Math.divisors(t).length <= 500; i += 1) {
            t = i * (i + 1) / 2;
        }
        return t;
    },
    function Problem_13() {
        var numbers = [
            37107287533902102798797998220837590246510135740250,
            46376937677490009712648124896970078050417018260538,
            74324986199524741059474233309513058123726617309629,
            91942213363574161572522430563301811072406154908250,
            23067588207539346171171980310421047513778063246676,
            89261670696623633820136378418383684178734361726757,
            28112879812849979408065481931592621691275889832738,
            44274228917432520321923589422876796487670272189318,
            47451445736001306439091167216856844588711603153276,
            70386486105843025439939619828917593665686757934951,
            62176457141856560629502157223196586755079324193331,
            64906352462741904929101432445813822663347944758178,
            92575867718337217661963751590579239728245598838407,
            58203565325359399008402633568948830189458628227828,
            80181199384826282014278194139940567587151170094390,
            35398664372827112653829987240784473053190104293586,
            86515506006295864861532075273371959191420517255829,
            71693888707715466499115593487603532921714970056938,
            54370070576826684624621495650076471787294438377604,
            53282654108756828443191190634694037855217779295145,
            36123272525000296071075082563815656710885258350721,
            45876576172410976447339110607218265236877223636045,
            17423706905851860660448207621209813287860733969412,
            81142660418086830619328460811191061556940512689692,
            51934325451728388641918047049293215058642563049483,
            62467221648435076201727918039944693004732956340691,
            15732444386908125794514089057706229429197107928209,
            55037687525678773091862540744969844508330393682126,
            18336384825330154686196124348767681297534375946515,
            80386287592878490201521685554828717201219257766954,
            78182833757993103614740356856449095527097864797581,
            16726320100436897842553539920931837441497806860984,
            48403098129077791799088218795327364475675590848030,
            87086987551392711854517078544161852424320693150332,
            59959406895756536782107074926966537676326235447210,
            69793950679652694742597709739166693763042633987085,
            41052684708299085211399427365734116182760315001271,
            65378607361501080857009149939512557028198746004375,
            35829035317434717326932123578154982629742552737307,
            94953759765105305946966067683156574377167401875275,
            88902802571733229619176668713819931811048770190271,
            25267680276078003013678680992525463401061632866526,
            36270218540497705585629946580636237993140746255962,
            24074486908231174977792365466257246923322810917141,
            91430288197103288597806669760892938638285025333403,
            34413065578016127815921815005561868836468420090470,
            23053081172816430487623791969842487255036638784583,
            11487696932154902810424020138335124462181441773470,
            63783299490636259666498587618221225225512486764533,
            67720186971698544312419572409913959008952310058822,
            95548255300263520781532296796249481641953868218774,
            76085327132285723110424803456124867697064507995236,
            37774242535411291684276865538926205024910326572967,
            23701913275725675285653248258265463092207058596522,
            29798860272258331913126375147341994889534765745501,
            18495701454879288984856827726077713721403798879715,
            38298203783031473527721580348144513491373226651381,
            34829543829199918180278916522431027392251122869539,
            40957953066405232632538044100059654939159879593635,
            29746152185502371307642255121183693803580388584903,
            41698116222072977186158236678424689157993532961922,
            62467957194401269043877107275048102390895523597457,
            23189706772547915061505504953922979530901129967519,
            86188088225875314529584099251203829009407770775672,
            11306739708304724483816533873502340845647058077308,
            82959174767140363198008187129011875491310547126581,
            97623331044818386269515456334926366572897563400500,
            42846280183517070527831839425882145521227251250327,
            55121603546981200581762165212827652751691296897789,
            32238195734329339946437501907836945765883352399886,
            75506164965184775180738168837861091527357929701337,
            62177842752192623401942399639168044983993173312731,
            32924185707147349566916674687634660915035914677504,
            99518671430235219628894890102423325116913619626622,
            73267460800591547471830798392868535206946944540724,
            76841822524674417161514036427982273348055556214818,
            97142617910342598647204516893989422179826088076852,
            87783646182799346313767754307809363333018982642090,
            10848802521674670883215120185883543223812876952786,
            71329612474782464538636993009049310363619763878039,
            62184073572399794223406235393808339651327408011116,
            66627891981488087797941876876144230030984490851411,
            60661826293682836764744779239180335110989069790714,
            85786944089552990653640447425576083659976645795096,
            66024396409905389607120198219976047599490197230297,
            64913982680032973156037120041377903785566085089252,
            16730939319872750275468906903707539413042652315011,
            94809377245048795150954100921645863754710598436791,
            78639167021187492431995700641917969777599028300699,
            15368713711936614952811305876380278410754449733078,
            40789923115535562561142322423255033685442488917353,
            44889911501440648020369068063960672322193204149535,
            41503128880339536053299340368006977710650566631954,
            81234880673210146739058568557934581403627822703280,
            82616570773948327592232845941706525094512325230608,
            22918802058777319719839450180888072429661980811197,
            77158542502016545090413245809786882778948721859617,
            72107838435069186155435662884062257473692284509516,
            20849603980134001723930671666823555245252804609722,
            53503534226472524250874054075591789781264330331690
        ], s = Math.sum(numbers), p = Math.ceil(Math.log(s) / Math.LN10);
        return Math.floor(s / Math.pow(10, p - 10));
    },
    function Problem_14() {
        function sequence(n) {
            var r = [n];
            while (n !== 1) {
                switch (n % 2) {
                case 0:
                    n /= 2;
                    r.push(n);
                    break;
                case 1:
                    n = 3 * n + 1;
                    r.push(n);
                    break;
                }
            }
            return r.length;
        }
        var i, maxl = 0, a, maxn = 0;
        for (i = 13; i < 1000000; i += 1) {
            a = sequence(i);
            if (a > maxl) {
                maxl = a;
                maxn = i;
            }
        }
        return maxn;
    },
    function Problem_15() {
        var size = 20, limit;
        limit = Math.factorial(2 * size) / Math.pow(Math.factorial(size), 2);
        return limit;
    },
    function Problem_16() {
        var n = "2", i;
        function twice(a) {
            a = a.split("").reverse();
            var l = a.length, i;
            for (i = 0; i < l; i += 1) {
                a[i] = 2 * a[i];
            }
            for (i = 0; i < l; i += 1) {
                if (a[i] > 9) {
                    a[i + 1] = a[i + 1] ? a[i + 1] + 1 : 1;
                    a[i] -= 10;
                }
            }
            return a.reverse().join("");
        }
        for (i = 1; i < 1000; i += 1) {
            n = twice(n);
        }
        n = n.split("");
        for (i = 0; i < n.length; i += 1) {
            n[i] = +n[i];
        }
        return Math.sum(n);
    },
    function Problem_17() {
        var i, r = "";
        for (i = 1; i <= 1000; i += 1) {
            r += Math.toText(i).replace(/\W/g, "");
        }
        return r.length;
    },
    function Problem_18() {
        var i, j, k, sampleSize = 6, tarray, total = 0, triangle = "75\n95 64\n17 47 82\n18 35 87 10\n20 04 82 47 65\n19 01 23 75 03 34\n88 02 77 73 07 63 67\n99 65 04 28 06 16 70 92\n41 41 26 56 83 40 80 70 33\n41 48 72 33 47 32 37 16 94 29\n53 71 44 65 25 43 91 52 97 51 14\n70 11 33 28 77 73 17 78 39 68 17 57\n91 71 52 38 17 14 91 43 58 50 27 29 48\n63 66 04 68 89 53 67 30 73 16 69 87 40 31\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23";
        triangle = triangle.split("\n");
        for (i in triangle) {
            if (triangle.hasOwnProperty(i) && triangle[i]) {
                triangle[i] = triangle[i].split(" ");
                for (j in triangle[i]) {
                    if (triangle[i].hasOwnProperty(j) && triangle[i][j]) {
                        triangle[i][j] = +triangle[i][j];
                    }
                }
            }
        }
        function sample(array, depth, index, limit) {
            limit = depth + limit > array.length ? array.length - depth:limit;
            var temp = [];
            while (limit) {
                limit -= 1;
                temp.push(array[depth + limit].slice(index, index + limit + 1));
            }
            return temp.reverse();
        }
        function findTotals(object, i, j) {
            i = i === undefined ? 0 : i;
            j = j === undefined ? 0 : j;
            var results = {}, subResult0 = {}, subResult1 = {}, r;
            if (i < object.length - 1) {
                subResult0 = findTotals(object, i + 1, j);
                subResult1 = findTotals(object, i + 1, j + 1);
                for (r in subResult0) {
                    if (subResult0.hasOwnProperty(r) && subResult0[r]) {
                        results["0" + r] = object[i][j] + subResult0[r];
                        results["1" + r] = object[i][j] + subResult1[r];
                    }
                }
                return results;
            } else {
                return {"": object[i][j]};
            }
        }
        function findMax(object) {
            var tname, tmax = 0, n;
            for (n in object) {
                if (object.hasOwnProperty(n) && object[n] && object[n] > tmax) {
                    tmax = object[n];
                    tname = n;
                }
            }
            return [tname, tmax];
        }
        i = 0;
        j = 0;
        k = Math.ceil(triangle.length / sampleSize);
        while (k) {
            tarray = findMax(findTotals(sample(triangle, i, j, sampleSize)));
            total += tarray[1];
            i += sampleSize;
            j += tarray[0].split("1").length - 1;
            if (triangle [i] !== undefined) {
                j += triangle[i][j + 1] > triangle[i][j] ? 1 : 0;
            }
            k -= 1;
        }
        return total;
        //Brute force
        //return findMax(findTotals(triangle))[1];
    },
    function Problem_19() {
        var i, j, c = 0;
        for (i = 1901; i <= 2000; i += 1) {
            for (j = 1; j <= 12; j += 1) {
                c += new Date("" + i + "/" + j + "/1").getDay() === 0 ? 1 : 0;
            }
        }
        return c;
    },
    function Problem_20() {
        var i, a = Math.bigInt.factorial(100).split("");
        for (i = 0; i < a.length; i += 1) {
            a[i] = +a[i];
        }
        return Math.sum(a);
    },
    function Problem_21() {
        function d(n) {
            var r = Math.divisors(n);
            r.pop();
            return Math.sum(r);
        }
        function amicable(a) {
            var b = d(a);
            if (d(b) === a && a !== b) {
                return true;
            }
            return false;
        }
        var c = [], i;
        for (i = 1; i < 10000; i += 1) {
            if (amicable(i)) {
                c.push(i);
            }
        }
        return Math.sum(c);
    },
    function Problem_22() {
        var names = http.get("names.txt"), i, score = 0;
        function p(a) {
            return "ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(a);
        }
        function v(a) {
            return a.length - 1 ? 1 + p(a.charAt(0)) + v(a.slice(1)) : 1 + p(a);
        }
        names.replace(/"/g, '');
        names = names.split(",").sort();
        for (i = 0; i < names.length; i += 1) {
            score += v(names[i]) * (i + 1);
        }
        return score;
    },
    function Problem_23() {
        var abundant = [], i, j, k, l, other = [];
        for (i = 1; i <= 28123; i += 1) {
            if (Math.sum(Math.divisors(i, true)) - i > 0) {
                abundant.push(i);
            }
            other[i - 1] = i;
        }
        for (i = 0; i < abundant.length; i += 1) {
            for (j = i; j < abundant.length; j += 1) {
                k = abundant[i] + abundant[j];
                l = other.indexOf(k);
                if (l > -1) {
                    other.splice(l, 1);
                }
            }
        }
        return Math.sum(other);
    },
    function Problem_24() {
        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].permutations()[999999].join("");
    },
    function Problem_25() {
        var a = "1", b = "1", c = "2", i = 3;
        while (c.length < 1000) {
            a = b;
            b = c;
            c = Math.bigInt.sum(a, b);
            i += 1;
        }
        return i;
    },
    function Problem_26() {
        var d, r = "", rs = [], maxR = 1;
        for (d = 1; d < 1000; d += 1) {
            r = Math.decimalRepresentation(1, d);
            rs.push(r);
            maxR = r.length > rs[maxR - 1].length ? d : maxR;
        }
        return maxR;
    },
    function Problem_27() {
        var n, a, b, l = 1000, p, pp, np = [], i, c, mc = 0, am = 0, bm = 0;
        //populates list with enough prime numbers for the max value
        Math.isPrime(l * l * 2 + l + 1);
        p = Math.js.primes;
        //gets the prime numbers below 1000;
        pp = p.slice(0, p.closeTo(l));
        for (i = 0; i < pp.length; i += 1) {
            np[i] = -1 * p[i];
        }
        np.reverse();
        //includes -1, 0 and 1
        np = np.concat([-1, 0, 1], p);
        for (a = 0; a < np.length; a += 1) {
            for (b = 0; b < np.length; b += 1) {
                c = 0;
                n = 0;
                while (p.indexOf(n * n + np[a] * n + np[b]) !== -1) {
                    //this is the consecutive counter
                    c += 1;
                    n += 1;
                }
                am = c > mc ? np[a] : am;
                bm = c > mc ? np[b] : bm;
                mc = c > mc ? c : mc;
            }
        }
        //the answer is the product of amax * bmax
        return "" + am + " * " + bm + " = " + am * bm;
    }, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined,
    function Problem_48() {
        var r = 0, i;
        for (i = 1; i <= 1; i += 1) {
            r = Math.bigInt.sum(r, Math.bigInt.pow(i, i));
        }
        return r.slice(r.length - 10);
    }, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined,
    undefined,
    function Problem_67() {
        var i, j, triangle;
        triangle = http.get("triangle.txt").split("\n");
        while (triangle[triangle.length - 1] === "") {
            triangle.pop();
        }
        for (i in triangle) {
            if (triangle.hasOwnProperty(i) && triangle[i]) {
                triangle[i] = triangle[i].split(" ");
                for (j in triangle[i]) {
                    if (triangle[i].hasOwnProperty(j) && triangle[i][j]) {
                        triangle[i][j] = +triangle[i][j];
                    }
                }
            }
        }
        triangle.reverse();
        for (i = 1; i < triangle.length; i += 1) {
            for (j = 0; j < triangle[i].length; j += 1) {
                triangle[i][j] += Math.max(triangle[i - 1][j], triangle[i - 1][j + 1]);
            }
        }
        return triangle.reverse()[0][0];
    }
], answers, times;
answers = [233168, 4613732, 6857, 906609, 232792560, 25164150, 104743, 40824, 31875000, 142913828922,
    70600674, 76576500, 5537376230, 837799, 137846528820, 1366, 10881, 1074, 171, 648,
    31626, 871198282, 4179871, 2783915460, 4782, 983, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined, 9110846700, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, 7273];
times = [11, 0, 1, 514, 1, 1, 58, 2, 549, 1322147,
    1, 1844, 2, 13082, 0, 272, 67, 3, 104, 69,
    593, 259, 1034792, 180000, 7830, 1000, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined, 7425095, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, 27];

/** * Solves the selected problem. */
function solve(n) {
    var t0, t1, problem, answer, p, time, conf, s;
    p = document.getElementById("problem");
    if (p) {
        p.parentNode.removeChild(p);
    }
    if (n === "") {
        return false;
    } else if (typeof(n) === "string") {
        n = +n;
    }
    problem = projectEuler[n - 1];
    answer = answers[n - 1];
    time = times[n - 1];
    function format(t) { 
        if (t === undefined) {
            return "might take a while. ";
        }
        if (t >= 60000) {
            t = "takes " + Math.floor(t / 60000) + " minutes";
        } else if (t >= 1000) {
            t = "takes " + Math.floor(t / 1000) + " seconds";
        } else {
            t = "takes " + t + " milliseconds";
        }
        return t + ", more or less, on a 1.5 GHz laptop using Google Chrome. ";
    }
    conf = time >= 4200 ? confirm("The algorithm " + format(time) + "Do you want to run it anyway?\nIf you don't the answer will still be displayed, but you won't get that warm, fuzzy sensation of puting your own number-crunching computer to work.") : true;
    if (conf) {
        t0 = new Date();
        answer = problem();
        t1 = new Date();
        time = t1 - t0;
    } else {
        time = "N/A";
    }
    function t(b) { 
        return document.createTextNode(b);
    }
    function e(b) {
        return document.createElement(b);
    }
    function a(b, c) {
        b.appendChild(c);
    }
    function c(d, b) {
        var r = e(d);
        a(r, t(b));
        return r;
    }
    p = e("p");
    p.id = "problem";
    a(p, c("h3", "Problem: " + n));
    a(p, c("i", pEProblems[n - 1]));
    a(p, e("br"));
    a(p, c("strong", "Answer: "));
    a(p, t(answer + ", "));
    a(p, c("strong", "Time: "));
    a(p, t(time + " "));
    a(p, c("small", "milliseconds"));
    a(p, t("."));
    a(p, e("br"));
    a(p, c("pre", problem));
    a(p, e("br"));
    s = document.getElementById("solution");
    a(s, p);
}

/** * Displays the chosen functions. */
function display(n) {
    var Mf = Math.js.functions, p, f, i;
    p = document.getElementById("function");
    if (p) {
        p.parentNode.removeChild(p);
    }
    if (n === "") {
        return false;
    }
    function t(b) { 
        return document.createTextNode(b);
    }
    function e(b) {
        return document.createElement(b);
    }
    function a(b, c) {
        b.appendChild(c);
    }
    function c(d, b) {
        var r = e(d);
        a(r, t(b));
        return r;
    }
    for (i = 0; i < Mf.length; i += 1) {
        if (Mf[i].name === n) {
            f = Mf[i];
        }
    }
    p = e("p");
    p.id = "function";
    a(p, c("h3", "Function: " + f.name));
    a(p, c("pre", f));
    a(document.getElementById("source"), p);
}

function populateLists() {
    var i, pl = document.getElementById("plist"), fl = document.getElementById("flist"), a = [], f, g, url, queries;
    for (f in Math) {
        if (typeof(Math[f]) === "object") {
            for (g in Math[f]) {
                if (typeof(Math[f][g]) === "function") {
                    a.push(Math[f][g]);
                }
            }
        } else if (typeof(Math[f]) === "function") {
            a.push(Math[f]);
        }
    }
    a.sort();
    Math.js.functions = a;
    function option(n, t) {
        var o = document.createElement("option"), txt = t + n;
        o.value = "" + n;
        txt = document.createTextNode(txt);
        o.appendChild(txt);
        return o;
    }
    for (i = 0; i < projectEuler.length; i += 1) {
        if (projectEuler[i] !== undefined) {
            pl.appendChild(option(i + 1, "Problem "));
        }
    }
    if (a[0].name !== undefined) {
        for (i = 0; i < a.length; i += 1) {
            fl.appendChild(option(a[i].name, ""));
        }
    } else {
        fl.parentNode.removeChild(fl);
        fl = document.getElementById("flabel");
        fl.parentNode.removeChild(fl);
    }
    
    function parseURL(url) {
        var fields = {'username' : 4, 'password' : 5, 'port' : 7, 'scheme' : 2, 'authority' : 6, 'path' : 8, 'url' : 0, 'query' : 9, 'fragment' : 10}, json = {}, parsed, p, q, queries;
        parsed = url.match(/^((\w+):\/\/)?((\w+):?(\w+)?@)?([^\/\?:]+):?(\d+)?(\/?[^\?#]+)?\??([^#]+)?#?(\w*)/);
        for (p in fields) {
            if (fields.hasOwnProperty(p) && parsed[fields[p]]) {
                json[p] = parsed[fields[p]];
            }
        }
        if (json.query !== undefined) {
            queries = json.query.split("&");
            json.query = {};
            for (q in queries) {
                if (queries.hasOwnProperty(q) && queries[q]) {
                    p = queries[q].split("=");
                    json.query[p[0]] = p[1] !== undefined ? p[1] : null;
                }
            }
        }
        return json;
    }
    url = parseURL(document.location.href);
    if (url.query) {
        if (url.query.solve) {
            solve(url.query.solve);
        }
        if (url.query.display) {
            display(url.query.display);
        }
    }
}

http.onLoad(populateLists);
